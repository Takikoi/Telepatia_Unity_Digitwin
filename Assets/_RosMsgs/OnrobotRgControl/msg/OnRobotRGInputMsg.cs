//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.OnrobotRgControl
{
    [Serializable]
    public class OnRobotRGInputMsg : Message
    {
        public const string k_RosMessageName = "onrobot_rg_control/OnRobotRGInput";
        public override string RosMessageName => k_RosMessageName;

        //  gFOF : Current fingertip offset in 1/10 millimeters. The value is a signed two's complement number.
        public ushort gFOF;
        //  gGWD : Current width between the gripper fingers in 1/10 millimeters.
        //         The width is provided without any fingertip offset, as it is measured between the insides of the aluminum fingers.
        public ushort gGWD;
        //  gSTA : Current device status, which indicates the status of the gripper and its motion.
        //  Bit       - Name              - Description
        //  0 (LSB)   - Busy              - High (1) when a motion is ongoing, low (0) when not. The gripper will only accept new commands when this flag is low.
        //  1         - Grip detected     - High (1) when an internal- or external grip is detected.
        //  2         - S1 pushed         - High (1) when safety switch 1 is pushed.
        //  3         - S1 trigged        - High (1) when safety circuit 1 is activated. The gripper will not move while this flag is high.
        //  4         - S2 pushed         - High (1) when safety switch 2 is pushed.
        //  5         - S2 trigged        - High (1) when safety circuit 2 is activated. The gripper will not move while this flag is high.
        //  6         - Safety error      - High (1) when on power on any of the safety switch is pushed.
        //  7 - 15    - Reserved          - Not used.
        public byte gSTA;
        //  gWDF : Current width between the gripper fingers in 1/10 millimeters.
        //         The set fingertip offset is considered.
        public ushort gWDF;

        public OnRobotRGInputMsg()
        {
            this.gFOF = 0;
            this.gGWD = 0;
            this.gSTA = 0;
            this.gWDF = 0;
        }

        public OnRobotRGInputMsg(ushort gFOF, ushort gGWD, byte gSTA, ushort gWDF)
        {
            this.gFOF = gFOF;
            this.gGWD = gGWD;
            this.gSTA = gSTA;
            this.gWDF = gWDF;
        }

        public static OnRobotRGInputMsg Deserialize(MessageDeserializer deserializer) => new OnRobotRGInputMsg(deserializer);

        private OnRobotRGInputMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.gFOF);
            deserializer.Read(out this.gGWD);
            deserializer.Read(out this.gSTA);
            deserializer.Read(out this.gWDF);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.gFOF);
            serializer.Write(this.gGWD);
            serializer.Write(this.gSTA);
            serializer.Write(this.gWDF);
        }

        public override string ToString()
        {
            return "OnRobotRGInputMsg: " +
            "\ngFOF: " + gFOF.ToString() +
            "\ngGWD: " + gGWD.ToString() +
            "\ngSTA: " + gSTA.ToString() +
            "\ngWDF: " + gWDF.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
