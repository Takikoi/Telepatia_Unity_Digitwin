//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.OnrobotVgControl
{
    [Serializable]
    public class OnRobotVGOutputMsg : Message
    {
        public const string k_RosMessageName = "onrobot_vg_control/OnRobotVGOutput";
        public override string RosMessageName => k_RosMessageName;

        //  rMCA : The Control mode
        //  rVCA : The Target vacuume field
        // 
        //         The register allows for control of channel A.
        //         The register is split into two 8-bit fields:
        //         Bits 15-8        Bits 7-0
        //         Control mode     Target vacuum
        // 
        //         The Control mode field must contain one of these three values:
        // 
        //         Value    Name    Description
        //         0 (0x00) Release Commands the channel to release
        //                          any work item and stop the pump,
        //                          if not required by the other channel.
        //         1 (0x01) Grip    Commands the channel to build up
        //                          and maintain vacuum on this channel.
        //         2 (0x02) Idle    Commands the channel to neither release nor grip.
        //                          Workpieces may "stick" to the channel
        //                          if physically pressed towards its vacuum cups,
        //                          but the VG will use slightly less power.
        // 
        //         The Target vacuum field sets the level of vacuum
        //         to be build up and maintained by the chann el.
        //         It is used only when the control mode is 1 (0x01) / Grip.
        //         The target vacuum should be provided in % vacuum.
        //         It should never exceed 80.
        // 
        //         Examples:
        //         Setting the register value 0 (0x0000)
        //             will command the VG to release the work item.
        //         Setting the register value 276 (0x0114)
        //             will command the VG to grip at 20 % vacuum.
        //         Setting the register value 296 (0x0128)
        //             will command the VG to grip at 40 % vacuum.
        //         Setting the register value 331 (0x014B)
        //             will command the VG to grip at 75 % vacuum.
        //         Setting the register value 512 (0x0200)
        //             will command the VG to idle the channel.
        public ushort rMCA;
        public ushort rVCA;
        //  rVCB : Same as the one of channel A.
        public ushort rMCB;
        public ushort rVCB;

        public OnRobotVGOutputMsg()
        {
            this.rMCA = 0;
            this.rVCA = 0;
            this.rMCB = 0;
            this.rVCB = 0;
        }

        public OnRobotVGOutputMsg(ushort rMCA, ushort rVCA, ushort rMCB, ushort rVCB)
        {
            this.rMCA = rMCA;
            this.rVCA = rVCA;
            this.rMCB = rMCB;
            this.rVCB = rVCB;
        }

        public static OnRobotVGOutputMsg Deserialize(MessageDeserializer deserializer) => new OnRobotVGOutputMsg(deserializer);

        private OnRobotVGOutputMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.rMCA);
            deserializer.Read(out this.rVCA);
            deserializer.Read(out this.rMCB);
            deserializer.Read(out this.rVCB);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.rMCA);
            serializer.Write(this.rVCA);
            serializer.Write(this.rMCB);
            serializer.Write(this.rVCB);
        }

        public override string ToString()
        {
            return "OnRobotVGOutputMsg: " +
            "\nrMCA: " + rMCA.ToString() +
            "\nrVCA: " + rVCA.ToString() +
            "\nrMCB: " + rMCB.ToString() +
            "\nrVCB: " + rVCB.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
